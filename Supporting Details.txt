Database used as MySQL/H2
Below are the API's to test with data

=======================================================

API's as below
---------------------

CUSTOMER
-------------------------------------------
POST
localhost:8080/api/customerRegistration

{
    "customerName": "Vidya"
}
-------------------------------------------
GET
localhost:8080/api/getRegisteredCustomerDetailsById/3
-------------------------------------------
PUT
localhost:8080/api/updateCustomerDetails/7
{
    "customerName": "Rama"
}
-------------------------------------------
DELETE
localhost:8080/api/deleteCustomerDetails/8
-------------------------------------------


TRANSACTION
-------------------------------------------
POST
localhost:8080/api/saveTransactionDetails
{
    "customerId": 2,
    "transactionDate": "2024-11-28T14:23:00",
    "transactionAmount": 80
}
-------------------------------------------
POST
localhost:8080/api/saveAllTransactionDetails

Check list of object for this endpoint as last
-------------------------------------------
GET
localhost:8080/api/getTransactionDetailsByCustomerId/2
-------------------------------------------
PUT
localhost:8080/api/updateTransactionDetails/60
{
    "customerId":2,
    "transactionDate": "2024-12-22T08:30:00",
    "transactionAmount": 70
}
-------------------------------------------
DELETE
localhost:8080/api/deleteTransactionDetails/61
{
    "customerId":2,
    "transactionDate": "2024-12-22T08:30:00",
    "transactionAmount": 70
}
-------------------------------------------



REWARDS
-------------------------------------------
GET
localhost:8080/api/rewards/2
-------------------------------------------
Transaction List
[
{
    "customerId": 2,
    "transactionDate": "2024-11-28T14:23:00",
    "transactionAmount": 80
  },
  {
    "customerId": 1,
    "transactionDate": "2024-10-10T12:45:00",
    "transactionAmount": 150
  },
  {
    "customerId": 3,
    "transactionDate": "2024-12-22T08:30:00",
    "transactionAmount": 45
  },
  {
    "customerId": 1,
    "transactionDate": "2024-09-15T10:00:00",
    "transactionAmount": 120
  },
  {
    "customerId": 2,
    "transactionDate": "2024-11-28T14:23:00",
    "transactionAmount": 80
  },
  {
    "customerId": 1,
    "transactionDate": "2024-10-10T12:45:00",
    "transactionAmount": 150
  },
  {
    "customerId": 3,
    "transactionDate": "2024-12-22T08:30:00",
    "transactionAmount": 45
  },
  {
    "customerId": 1,
    "transactionDate": "2024-09-15T10:00:00",
    "transactionAmount": 120
  },
  {
    "customerId": 2,
    "transactionDate": "2024-12-05T14:00:00",
    "transactionAmount": 60
  },
  {
    "customerId": 3,
    "transactionDate": "2024-11-15T13:30:00",
    "transactionAmount": 200
  },
  {
    "customerId": 1,
    "transactionDate": "2024-12-01T11:00:00",
    "transactionAmount": 50
  },
  {
    "customerId": 2,
    "transactionDate": "2024-10-20T16:45:00",
    "transactionAmount": 175
  },
  {
    "customerId": 3,
    "transactionDate": "2024-11-10T09:30:00",
    "transactionAmount": 120
  },
  {
    "customerId": 2,
    "transactionDate": "2024-12-10T15:10:00",
    "transactionAmount": 90
  },
  {
    "customerId": 1,
    "transactionDate": "2024-09-25T13:00:00",
    "transactionAmount": 180
  },
  {
    "customerId": 3,
    "transactionDate": "2024-12-15T07:50:00",
    "transactionAmount": 30
  },
  {
    "customerId": 1,
    "transactionDate": "2024-11-05T12:10:00",
    "transactionAmount": 60
  },
  {
    "customerId": 2,
    "transactionDate": "2024-10-30T14:40:00",
    "transactionAmount": 200
  },
  {
    "customerId": 3,
    "transactionDate": "2024-12-25T17:25:00",
    "transactionAmount": 95
  },
  {
    "customerId": 2,
    "transactionDate": "2024-11-20T16:00:00",
    "transactionAmount": 40
  },
  {
    "customerId": 1,
    "transactionDate": "2024-12-30T10:30:00",
    "transactionAmount": 110
  },
  {
    "customerId": 3,
    "transactionDate": "2024-11-30T18:00:00",
    "transactionAmount": 150
  },
  {
    "customerId": 1,
    "transactionDate": "2024-09-05T09:00:00",
    "transactionAmount": 65
  }
]
=============================================================

SOLID Principle Implemented

S- Single Responsibility Principle
A class should have one single responsibility (or multiple tasks/responibilities create multiple classes)

O- Open for Extension but Closed for Modification Principle(Open/Close Principle)
For new/extra functionality create new classes and extends/implements it with the previous class/interface (ie. don't do any changes in previouly tested classes/interfaces)
it is mostly done in production phase to avoid bugs/issues.

L- Liskov Substitution principle
Class B is subtype of class A then we should be able to replace object of A with B without breaking the behaviour of the program.
this should work when the subclass(B) extends the capability of parent class(A) and should not narrow it down.
eg - Bike, Bicycle, Car and the methods are turnOnENgine() and accelerate()

I- Interface Segmented Principle
Interfaces should be such that the client (class implementing that interface) should not implement unnecessory methods that they do not need.
eg - class waiter implements restaurantEmployee interface having methods like washDishes(), serveCustomer(), cookFood();
insted above we can create two seperate interfaces as waiterInterface, chefInterface, HelperInterface with respective methods so that
waiter class,chef class and helper class can implement the required methods. 

D- Depndency Inversion Principle
Class should depend on interfaces rather than concrete classes
using this loose coupling occurs, hence we can use multiple methods or we can change use of the methods are per the requirement 

=============================================================================================================================================

Used of JPA Repository.

Database used as PostgreSQL/MySQL/H2.

Also provided all the details to use PostgreSQL/MySQL/H2 any of these database as per the convinience.

For unit test cases jUnit used.

To check code coverage EclEmma used.

For testing Loggers are added.

Spring security added for the authentication

==============================================================================================================================================



